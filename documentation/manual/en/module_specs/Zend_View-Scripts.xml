<?xml version="1.0" encoding="utf-8"?>
<!-- Converted by db4-upgrade version 1.0 -->

<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.view.scripts"><info><title>View Scripts</title></info>
    

    <para>
        Once your controller has assigned variables and called <methodname>render()</methodname>,
        <classname>Zend_View</classname> then includes the requested view script and executes
        it "inside" the scope of the <classname>Zend_View</classname> instance. Therefore,
        in your view scripts, references to $this actually point to the
        <classname>Zend_View</classname> instance itself.
    </para>

    <para>
        Variables assigned to the view from the controller are referred
        to as instance properties. For example, if the controller were
        to assign a variable 'something', you would refer to it as
        $this-&gt;something in the view script. (This allows you to keep
        track of which values were assigned to the script, and which are
        internal to the script itself.)
    </para>

    <para>
        By way of reminder, here is the example view script from the
        <classname>Zend_View</classname> introduction.
    </para>

    <programlisting language="php">
&lt;?php if ($this-&gt;books): ?&gt;

    &lt;!-- A table of some books. --&gt;
    &lt;table&gt;
        &lt;tr&gt;
            &lt;th&gt;Author&lt;/th&gt;
            &lt;th&gt;Title&lt;/th&gt;
        &lt;/tr&gt;

        &lt;?php foreach ($this-&gt;books as $key =&gt; $val): ?&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;?php echo $this-&gt;escape($val['author']) ?&gt;&lt;/td&gt;
            &lt;td&gt;&lt;?php echo $this-&gt;escape($val['title']) ?&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;?php endforeach; ?&gt;

    &lt;/table&gt;

&lt;?php else: ?&gt;

    &lt;p&gt;There are no books to display.&lt;/p&gt;

&lt;?php endif;?&gt;
</programlisting>

    <section xml:id="zend.view.scripts.escaping"><info><title>Escaping Output</title></info>
        

        <para>
            One of the most important tasks to perform in a view script
            is to make sure that output is escaped properly; among other
            things, this helps to avoid cross-site scripting attacks.
            Unless you are using a function, method, or helper that does
            escaping on its own, you should always escape variables when
            you output them.
        </para>

        <para>
            <classname>Zend_View</classname> comes with a method called escape() that does such
            escaping for you.
        </para>

        <programlisting language="php">
// bad view-script practice:
echo $this-&gt;variable;

// good view-script practice:
echo $this-&gt;escape($this-&gt;variable);
</programlisting>

        <para>
            By default, the escape() method uses the <acronym>PHP</acronym> htmlspecialchars()
            function for escaping. However, depending on your environment,
            you may wish for escaping to occur in a different way. Use the
            setEscape() method at the controller level to tell <classname>Zend_View</classname>
            what escaping callback to use.
        </para>

        <programlisting language="php">
// create a Zend_View instance
$view = new Zend_View();

// tell it to use htmlentities as the escaping callback
$view-&gt;setEscape('htmlentities');

// or tell it to use a static class method as the callback
$view-&gt;setEscape(array('SomeClass', 'methodName'));

// or even an instance method
$obj = new SomeClass();
$view-&gt;setEscape(array($obj, 'methodName'));

// and then render your view
echo $view-&gt;render(...);
</programlisting>

        <para>
            The callback function or method should take the value to be
            escaped as its first parameter, and all other parameters should
            be optional.
        </para>
    </section>

    <section xml:id="zend.view.scripts.templates"><info><title>Using Alternate Template Systems</title></info>
        

        <para>
            Although <acronym>PHP</acronym> is itself a powerful template system, many developers
            feel it is too powerful or complex for their template designers and
            will want to use an alternate template engine. <classname>Zend_View</classname> provides
            two mechanisms for doing so, the first through view scripts, the
            second by implementing <classname>Zend_View_Interface</classname>.
        </para>

        <section xml:id="zend.view.scripts.templates.scripts"><info><title>Template Systems Using View Scripts</title></info>
            

            <para>
                A view script may be used to instantiate and manipulate a
                separate template object, such as a PHPLIB-style template. The
                view script for that kind of activity might look something like
                this:
            </para>

            <programlisting language="php">
include_once 'template.inc';
$tpl = new Template();

if ($this-&gt;books) {
    $tpl-&gt;setFile(array(
        "booklist" =&gt; "booklist.tpl",
        "eachbook" =&gt; "eachbook.tpl",
    ));

    foreach ($this-&gt;books as $key =&gt; $val) {
        $tpl-&gt;set_var('author', $this-&gt;escape($val['author']);
        $tpl-&gt;set_var('title', $this-&gt;escape($val['title']);
        $tpl-&gt;parse("books", "eachbook", true);
    }

    $tpl-&gt;pparse("output", "booklist");
} else {
    $tpl-&gt;setFile("nobooks", "nobooks.tpl")
    $tpl-&gt;pparse("output", "nobooks");
}
</programlisting>

            <para>
                These would be the related template files:
            </para>

            <programlisting language="html">
&lt;!-- booklist.tpl --&gt;
&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;Author&lt;/th&gt;
        &lt;th&gt;Title&lt;/th&gt;
    &lt;/tr&gt;
    {books}
&lt;/table&gt;

&lt;!-- eachbook.tpl --&gt;
    &lt;tr&gt;
        &lt;td&gt;{author}&lt;/td&gt;
        &lt;td&gt;{title}&lt;/td&gt;
    &lt;/tr&gt;

&lt;!-- nobooks.tpl --&gt;
&lt;p&gt;There are no books to display.&lt;/p&gt;
</programlisting>
        </section>

        <section xml:id="zend.view.scripts.templates.interface"><info><title>Template Systems Using Zend_View_Interface</title></info>
            

            <para>
                Some may find it easier to simply provide a
                <classname>Zend_View</classname>-compatible template engine.
                <classname>Zend_View_Interface</classname> defines the minimum interface needed for
                compatability:
            </para>

            <programlisting language="php">
/**
 * Return the actual template engine object
 */
public function getEngine();

/**
 * Set the path to view scripts/templates
 */
public function setScriptPath($path);

/**
 * Set a base path to all view resources
 */
public function setBasePath($path, $prefix = 'Zend_View');

/**
 * Add an additional base path to view resources
 */
public function addBasePath($path, $prefix = 'Zend_View');

/**
 * Retrieve the current script paths
 */
public function getScriptPaths();

/**
 * Overloading methods for assigning template variables as object
 * properties
 */
public function __set($key, $value);
public function __isset($key);
public function __unset($key);

/**
 * Manual assignment of template variables, or ability to assign
 * multiple variables en masse.
 */
public function assign($spec, $value = null);

/**
 * Unset all assigned template variables
 */
public function clearVars();

/**
 * Render the template named $name
 */
public function render($name);
</programlisting>

            <para>
                Using this interface, it becomes relatively easy to wrap a
                third-party template engine as a <classname>Zend_View</classname>-compatible class.
                As an example, the following is one potential wrapper for Smarty:
            </para>

            <programlisting language="php">
class Zend_View_Smarty implements Zend_View_Interface
{
    /**
     * Smarty object
     * @var Smarty
     */
    protected $_smarty;

    /**
     * Constructor
     *
     * @param string $tmplPath
     * @param array $extraParams
     * @return void
     */
    public function __construct($tmplPath = null, $extraParams = array())
    {
        $this-&gt;_smarty = new Smarty;

        if (null !== $tmplPath) {
            $this-&gt;setScriptPath($tmplPath);
        }

        foreach ($extraParams as $key =&gt; $value) {
            $this-&gt;_smarty-&gt;$key = $value;
        }
    }

    /**
     * Return the template engine object
     *
     * @return Smarty
     */
    public function getEngine()
    {
        return $this-&gt;_smarty;
    }

    /**
     * Set the path to the templates
     *
     * @param string $path The directory to set as the path.
     * @return void
     */
    public function setScriptPath($path)
    {
        if (is_readable($path)) {
            $this-&gt;_smarty-&gt;template_dir = $path;
            return;
        }

        throw new Exception('Invalid path provided');
    }

    /**
     * Retrieve the current template directory
     *
     * @return string
     */
    public function getScriptPaths()
    {
        return array($this-&gt;_smarty-&gt;template_dir);
    }

    /**
     * Alias for setScriptPath
     *
     * @param string $path
     * @param string $prefix Unused
     * @return void
     */
    public function setBasePath($path, $prefix = 'Zend_View')
    {
        return $this-&gt;setScriptPath($path);
    }

    /**
     * Alias for setScriptPath
     *
     * @param string $path
     * @param string $prefix Unused
     * @return void
     */
    public function addBasePath($path, $prefix = 'Zend_View')
    {
        return $this-&gt;setScriptPath($path);
    }

    /**
     * Assign a variable to the template
     *
     * @param string $key The variable name.
     * @param mixed $val The variable value.
     * @return void
     */
    public function __set($key, $val)
    {
        $this-&gt;_smarty-&gt;assign($key, $val);
    }

    /**
     * Allows testing with empty() and isset() to work
     *
     * @param string $key
     * @return boolean
     */
    public function __isset($key)
    {
        return (null !== $this-&gt;_smarty-&gt;get_template_vars($key));
    }

    /**
     * Allows unset() on object properties to work
     *
     * @param string $key
     * @return void
     */
    public function __unset($key)
    {
        $this-&gt;_smarty-&gt;clear_assign($key);
    }

    /**
     * Assign variables to the template
     *
     * Allows setting a specific key to the specified value, OR passing
     * an array of key =&gt; value pairs to set en masse.
     *
     * @see __set()
     * @param string|array $spec The assignment strategy to use (key or
     * array of key =&gt; value pairs)
     * @param mixed $value (Optional) If assigning a named variable,
     * use this as the value.
     * @return void
     */
    public function assign($spec, $value = null)
    {
        if (is_array($spec)) {
            $this-&gt;_smarty-&gt;assign($spec);
            return;
        }

        $this-&gt;_smarty-&gt;assign($spec, $value);
    }

    /**
     * Clear all assigned variables
     *
     * Clears all variables assigned to Zend_View either via
     * {@link assign()} or property overloading
     * ({@link __get()}/{@link __set()}).
     *
     * @return void
     */
    public function clearVars()
    {
        $this-&gt;_smarty-&gt;clear_all_assign();
    }

    /**
     * Processes a template and returns the output.
     *
     * @param string $name The template to process.
     * @return string The output.
     */
    public function render($name)
    {
        return $this-&gt;_smarty-&gt;fetch($name);
    }
}
</programlisting>

            <para>
                In this example, you would instantiate the
                <classname>Zend_View_Smarty</classname> class instead of
                <classname>Zend_View</classname>, and then use it in roughly the same
                fashion as <classname>Zend_View</classname>:
            </para>

            <programlisting language="php">
//Example 1. In initView() of initializer.
$view = new Zend_View_Smarty('/path/to/templates');
$viewRenderer =
    Zend_Controller_Action_HelperBroker::getStaticHelper('ViewRenderer');
$viewRenderer-&gt;setView($view)
             -&gt;setViewBasePathSpec($view-&gt;_smarty-&gt;template_dir)
             -&gt;setViewScriptPathSpec(':controller/:action.:suffix')
             -&gt;setViewScriptPathNoControllerSpec(':action.:suffix')
             -&gt;setViewSuffix('tpl');

//Example 2. Usage in action controller remains the same...
class FooController extends Zend_Controller_Action
{
    public function barAction()
    {
        $this-&gt;view-&gt;book   = 'Zend PHP 5 Certification Study Guide';
        $this-&gt;view-&gt;author = 'Davey Shafik and Ben Ramsey'
    }
}

//Example 3. Initializing view in action controller
class FooController extends Zend_Controller_Action
{
    public function init()
    {
        $this-&gt;view   = new Zend_View_Smarty('/path/to/templates');
        $viewRenderer = $this-&gt;_helper-&gt;getHelper('viewRenderer');
        $viewRenderer-&gt;setView($this-&gt;view)
                     -&gt;setViewBasePathSpec($view-&gt;_smarty-&gt;template_dir)
                     -&gt;setViewScriptPathSpec(':controller/:action.:suffix')
                     -&gt;setViewScriptPathNoControllerSpec(':action.:suffix')
                     -&gt;setViewSuffix('tpl');
    }
</programlisting>
        </section>
    </section>
</section>

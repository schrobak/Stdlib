<?xml version="1.0" encoding="utf-8"?>


<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.form.advanced"><info><title>Advanced Zend_Form Usage</title></info>
    

    <para>
        <classname>Zend_Form</classname> has a wealth of functionality, much of it aimed
        at experienced developers. This chapter aims to document some of this
        functionality with examples and use cases.
    </para>

    <section xml:id="zend.form.advanced.arrayNotation"><info><title>Array Notation</title></info>
        

        <para>
            Many experienced web developers like to group related form elements
            using array notation in the element names. For example, if you have
            two addresses you wish to capture, a shipping and a billing address,
            you may have identical elements; by grouping them in an array, you
            can ensure they are captured separately. Take the following form,
            for example:
        </para>

        <programlisting language="html">
&lt;form&gt;
    &lt;fieldset&gt;
        &lt;legend&gt;Shipping Address&lt;/legend&gt;
        &lt;dl&gt;
            &lt;dt&gt;&lt;label for="recipient"&gt;Ship to:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="recipient" type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="address"&gt;Address:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="address" type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="municipality"&gt;City:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="municipality" type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="province"&gt;State:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="province" type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="postal"&gt;Postal Code:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="postal" type="text" value="" /&gt;&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/fieldset&gt;

    &lt;fieldset&gt;
        &lt;legend&gt;Billing Address&lt;/legend&gt;
        &lt;dl&gt;
            &lt;dt&gt;&lt;label for="payer"&gt;Bill To:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="payer" type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="address"&gt;Address:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="address" type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="municipality"&gt;City:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="municipality" type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="province"&gt;State:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="province" type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="postal"&gt;Postal Code:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="postal" type="text" value="" /&gt;&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/fieldset&gt;

    &lt;dl&gt;
        &lt;dt&gt;&lt;label for="terms"&gt;I agree to the Terms of Service&lt;/label&gt;&lt;/dt&gt;
        &lt;dd&gt;&lt;input name="terms" type="checkbox" value="" /&gt;&lt;/dd&gt;

        &lt;dt&gt;&lt;/dt&gt;
        &lt;dd&gt;&lt;input name="save" type="submit" value="Save" /&gt;&lt;/dd&gt;
    &lt;/dl&gt;
&lt;/form&gt;
</programlisting>

        <para>
            In this example, the billing and shipping address contain some
            identical fields, which means one would overwrite the other. We can
            solve this solution using array notation:
        </para>

        <programlisting language="html">
&lt;form&gt;
    &lt;fieldset&gt;
        &lt;legend&gt;Shipping Address&lt;/legend&gt;
        &lt;dl&gt;
            &lt;dt&gt;&lt;label for="shipping-recipient"&gt;Ship to:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="shipping[recipient]" id="shipping-recipient"
                type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="shipping-address"&gt;Address:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="shipping[address]" id="shipping-address"
                type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="shipping-municipality"&gt;City:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="shipping[municipality]" id="shipping-municipality"
                type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="shipping-province"&gt;State:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="shipping[province]" id="shipping-province"
                type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="shipping-postal"&gt;Postal Code:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="shipping[postal]" id="shipping-postal"
                type="text" value="" /&gt;&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/fieldset&gt;

    &lt;fieldset&gt;
        &lt;legend&gt;Billing Address&lt;/legend&gt;
        &lt;dl&gt;
            &lt;dt&gt;&lt;label for="billing-payer"&gt;Bill To:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="billing[payer]" id="billing-payer"
                type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="billing-address"&gt;Address:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="billing[address]" id="billing-address"
                type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="billing-municipality"&gt;City:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="billing[municipality]" id="billing-municipality"
                type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="billing-province"&gt;State:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="billing[province]" id="billing-province"
                type="text" value="" /&gt;&lt;/dd&gt;

            &lt;dt&gt;&lt;label for="billing-postal"&gt;Postal Code:&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;input name="billing[postal]" id="billing-postal"
                type="text" value="" /&gt;&lt;/dd&gt;
        &lt;/dl&gt;
    &lt;/fieldset&gt;

    &lt;dl&gt;
        &lt;dt&gt;&lt;label for="terms"&gt;I agree to the Terms of Service&lt;/label&gt;&lt;/dt&gt;
        &lt;dd&gt;&lt;input name="terms" type="checkbox" value="" /&gt;&lt;/dd&gt;

        &lt;dt&gt;&lt;/dt&gt;
        &lt;dd&gt;&lt;input name="save" type="submit" value="Save" /&gt;&lt;/dd&gt;
    &lt;/dl&gt;
&lt;/form&gt;
</programlisting>

        <para>
            In the above sample, we now get separate addresses. In the submitted
            form, we'll now have three elements, the 'save' element for the
            submit, and then two arrays, 'shipping' and 'billing', each with
            keys for their various elements.
        </para>

        <para>
            <classname>Zend_Form</classname> attempts to automate this process with its
            <link linkend="zend.form.forms.subforms">sub forms</link>. By
            default, sub forms render using the array notation as shown in the
            previous <acronym>HTML</acronym> form listing, complete with ids. The array name is
            based on the sub form name, with the keys based on the elements
            contained in the sub form. Sub forms may be nested arbitrarily deep,
            and this will create nested arrays to reflect the structure.
            Additionally, the various validation routines in
            <classname>Zend_Form</classname> honor the array structure, ensuring that your
            form validates correctly, no matter how arbitrarily deep you nest
            your sub forms. You need do nothing to benefit from this; this
            behaviour is enabled by default.
        </para>

        <para>
            Additionally, there are facilities that allow you to turn on array
            notation conditionally, as well as specify the specific array to
            which an element or collection belongs:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <methodname>Zend_Form::setIsArray($flag)</methodname>: By setting the
                    flag <constant>TRUE</constant>, you can indicate that an entire form should be
                    treated as an array. By default, the form's name will be
                    used as the name of the array, unless
                    <methodname>setElementsBelongTo()</methodname> has been called. If the
                    form has no specified name, or if
                    <methodname>setElementsBelongTo()</methodname> has not been set, this
                    flag will be ignored (as there is no array name to which
                    the elements may belong).
                </para>

                <para>
                    You may determine if a form is being treated as an array
                    using the <methodname>isArray()</methodname> accessor.
                </para>
            </listitem>

            <listitem>
                <para>
                    <methodname>Zend_Form::setElementsBelongTo($array)</methodname>:
                    Using this method, you can specify the name of an array to
                    which all elements of the form belong. You can determine the
                    name using the <methodname>getElementsBelongTo()</methodname> accessor.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Additionally, on the element level, you can specify individual
            elements may belong to particular arrays using
            <methodname>Zend_Form_Element::setBelongsTo()</methodname> method.
            To discover what this value is -- whether set explicitly or
            implicitly via the form -- you may use the
            <methodname>getBelongsTo()</methodname> accessor.
        </para>
    </section>

    <section xml:id="zend.form.advanced.multiPage"><info><title>Multi-Page Forms</title></info>
        

        <para>
            Currently, Multi-Page forms are not officially supported in
            <classname>Zend_Form</classname>; however, most support for implementing them
            is available and can be utilized with a little extra tooling.
        </para>

        <para>
            The key to creating a multi-page form is to utilize sub forms, but
            to display only one such sub form per page. This allows you to
            submit a single sub form at a time and validate it, but not process
            the form until all sub forms are complete.
        </para>

        <example xml:id="zend.form.advanced.multiPage.registration"><info><title>Registration Form Example</title></info>
            

            <para>
                Let's use a registration form as an example. For our purposes,
                we want to capture the desired username and password on the
                first page, then the user's metadata -- given name, family name,
                and location -- and finally allow them to decide what mailing
                lists, if any, they wish to subscribe to.
            </para>

            <para>
                First, let's create our own form, and define several sub forms
                within it:
            </para>

            <programlisting language="php">
class My_Form_Registration extends Zend_Form
{
    public function init()
    {
        // Create user sub form: username and password
        $user = new Zend_Form_SubForm();
        $user-&gt;addElements(array(
            new Zend_Form_Element_Text('username', array(
                'required'   =&gt; true,
                'label'      =&gt; 'Username:',
                'filters'    =&gt; array('StringTrim', 'StringToLower'),
                'validators' =&gt; array(
                    'Alnum',
                    array('Regex',
                          false,
                          array('/^[a-z][a-z0-9]{2,}$/'))
                )
            )),

            new Zend_Form_Element_Password('password', array(
                'required'   =&gt; true,
                'label'      =&gt; 'Password:',
                'filters'    =&gt; array('StringTrim'),
                'validators' =&gt; array(
                    'NotEmpty',
                    array('StringLength', false, array(6))
                )
            )),
        ));

        // Create demographics sub form: given name, family name, and
        // location
        $demog = new Zend_Form_SubForm();
        $demog-&gt;addElements(array(
            new Zend_Form_Element_Text('givenName', array(
                'required'   =&gt; true,
                'label'      =&gt; 'Given (First) Name:',
                'filters'    =&gt; array('StringTrim'),
                'validators' =&gt; array(
                    array('Regex',
                          false,
                          array('/^[a-z][a-z0-9., \'-]{2,}$/i'))
                )
            )),

            new Zend_Form_Element_Text('familyName', array(
                'required'   =&gt; true,
                'label'      =&gt; 'Family (Last) Name:',
                'filters'    =&gt; array('StringTrim'),
                'validators' =&gt; array(
                    array('Regex',
                          false,
                          array('/^[a-z][a-z0-9., \'-]{2,}$/i'))
                )
            )),

            new Zend_Form_Element_Text('location', array(
                'required'   =&gt; true,
                'label'      =&gt; 'Your Location:',
                'filters'    =&gt; array('StringTrim'),
                'validators' =&gt; array(
                    array('StringLength', false, array(2))
                )
            )),
        ));

        // Create mailing lists sub form
        $listOptions = array(
            'none'        =&gt; 'No lists, please',
            'fw-general'  =&gt; 'Zend Framework General List',
            'fw-mvc'      =&gt; 'Zend Framework MVC List',
            'fw-auth'     =&gt; 'Zend Framwork Authentication and ACL List',
            'fw-services' =&gt; 'Zend Framework Web Services List',
        );
        $lists = new Zend_Form_SubForm();
        $lists-&gt;addElements(array(
            new Zend_Form_Element_MultiCheckbox('subscriptions', array(
                'label'        =&gt;
                    'Which lists would you like to subscribe to?',
                'multiOptions' =&gt; $listOptions,
                'required'     =&gt; true,
                'filters'      =&gt; array('StringTrim'),
                'validators'   =&gt; array(
                    array('InArray',
                          false,
                          array(array_keys($listOptions)))
                )
            )),
        ));

        // Attach sub forms to main form
        $this-&gt;addSubForms(array(
            'user'  =&gt; $user,
            'demog' =&gt; $demog,
            'lists' =&gt; $lists
        ));
    }
}
</programlisting>

            <para>
                Note that there are no submit buttons, and that we have done
                nothing with the sub form decorators -- which means that by
                default they will be displayed as fieldsets. We will need to be
                able to override these as we display each individual sub form,
                and add in submit buttons so we can actually process them --
                which will also require action and method properties. Let's add
                some scaffolding to our class to provide that information:
            </para>

            <programlisting language="php">
class My_Form_Registration extends Zend_Form
{
    // ...

    /**
     * Prepare a sub form for display
     *
     * @param  string|Zend_Form_SubForm $spec
     * @return Zend_Form_SubForm
     */
    public function prepareSubForm($spec)
    {
        if (is_string($spec)) {
            $subForm = $this-&gt;{$spec};
        } elseif ($spec instanceof Zend_Form_SubForm) {
            $subForm = $spec;
        } else {
            throw new Exception('Invalid argument passed to ' .
                                __FUNCTION__ . '()');
        }
        $this-&gt;setSubFormDecorators($subForm)
             -&gt;addSubmitButton($subForm)
             -&gt;addSubFormActions($subForm);
        return $subForm;
    }

    /**
     * Add form decorators to an individual sub form
     *
     * @param  Zend_Form_SubForm $subForm
     * @return My_Form_Registration
     */
    public function setSubFormDecorators(Zend_Form_SubForm $subForm)
    {
        $subForm-&gt;setDecorators(array(
            'FormElements',
            array('HtmlTag', array('tag' =&gt; 'dl',
                                   'class' =&gt; 'zend_form')),
            'Form',
        ));
        return $this;
    }

    /**
     * Add a submit button to an individual sub form
     *
     * @param  Zend_Form_SubForm $subForm
     * @return My_Form_Registration
     */
    public function addSubmitButton(Zend_Form_SubForm $subForm)
    {
        $subForm-&gt;addElement(new Zend_Form_Element_Submit(
            'save',
            array(
                'label'    =&gt; 'Save and continue',
                'required' =&gt; false,
                'ignore'   =&gt; true,
            )
        ));
        return $this;
    }

    /**
     * Add action and method to sub form
     *
     * @param  Zend_Form_SubForm $subForm
     * @return My_Form_Registration
     */
    public function addSubFormActions(Zend_Form_SubForm $subForm)
    {
        $subForm-&gt;setAction('/registration/process')
                -&gt;setMethod('post');
        return $this;
    }
}
</programlisting>

            <para>
                Next, we need to add some scaffolding in our action controller,
                and have several considerations. First, we need to make sure we
                persist form data between requests, so that we can determine
                when to quit. Second, we need some logic to determine what form
                segments have already been submitted, and what sub form to
                display based on that information. We'll use
                <classname>Zend_Session_Namespace</classname> to persist data, which will
                also help us answer the question of which form to submit.
            </para>

            <para>
                Let's create our controller, and add a method for retrieving a
                form instance:
            </para>

            <programlisting language="php">
class RegistrationController extends Zend_Controller_Action
{
    protected $_form;

    public function getForm()
    {
        if (null === $this-&gt;_form) {
            $this-&gt;_form = new My_Form_Registration();
        }
        return $this-&gt;_form;
    }
}
</programlisting>

            <para>
                Now, let's add some functionality for determining which form to
                display. Basically, until the entire form is considered valid,
                we need to continue displaying form segments. Additionally, we
                likely want to make sure they're in a particular order: user,
                demog, and then lists. We can determine what data has been
                submitted by checking our session namespace for particular keys
                representing each subform.
            </para>

            <programlisting language="php">
class RegistrationController extends Zend_Controller_Action
{
    // ...

    protected $_namespace = 'RegistrationController';
    protected $_session;

    /**
     * Get the session namespace we're using
     *
     * @return Zend_Session_Namespace
     */
    public function getSessionNamespace()
    {
        if (null === $this-&gt;_session) {
            $this-&gt;_session =
                new Zend_Session_Namespace($this-&gt;_namespace);
        }

        return $this-&gt;_session;
    }

    /**
     * Get a list of forms already stored in the session
     *
     * @return array
     */
    public function getStoredForms()
    {
        $stored = array();
        foreach ($this-&gt;getSessionNamespace() as $key =&gt; $value) {
            $stored[] = $key;
        }

        return $stored;
    }

    /**
     * Get list of all subforms available
     *
     * @return array
     */
    public function getPotentialForms()
    {
        return array_keys($this-&gt;getForm()-&gt;getSubForms());
    }

    /**
     * What sub form was submitted?
     *
     * @return false|Zend_Form_SubForm
     */
    public function getCurrentSubForm()
    {
        $request = $this-&gt;getRequest();
        if (!$request-&gt;isPost()) {
            return false;
        }

        foreach ($this-&gt;getPotentialForms() as $name) {
            if ($data = $request-&gt;getPost($name, false)) {
                if (is_array($data)) {
                    return $this-&gt;getForm()-&gt;getSubForm($name);
                    break;
                }
            }
        }

        return false;
    }

    /**
     * Get the next sub form to display
     *
     * @return Zend_Form_SubForm|false
     */
    public function getNextSubForm()
    {
        $storedForms    = $this-&gt;getStoredForms();
        $potentialForms = $this-&gt;getPotentialForms();

        foreach ($potentialForms as $name) {
            if (!in_array($name, $storedForms)) {
                return $this-&gt;getForm()-&gt;getSubForm($name);
            }
        }

        return false;
    }
}
</programlisting>

            <para>
                The above methods allow us to use notations such as "<command>$subForm =
                    $this-&gt;getCurrentSubForm();</command>" to retrieve the current
                sub form for validation, or "<command>$next =
                    $this-&gt;getNextSubForm();</command>" to get the next one to
                display.
            </para>

            <para>
                Now, let's figure out how to process and display the various sub
                forms. We can use <methodname>getCurrentSubForm()</methodname> to determine
                if any sub forms have been submitted (<constant>FALSE</constant> return values
                indicate none have been displayed or submitted), and
                <methodname>getNextSubForm()</methodname> to retrieve a form to display. We
                can then use the form's <methodname>prepareSubForm()</methodname> method to
                ensure the form is ready for display.
            </para>

            <para>
                When we have a form submission, we can validate the sub form,
                and then check to see if the entire form is now valid. To do
                these tasks, we'll need additional methods that ensure that
                submitted data is added to the session, and that when validating
                the form entire, we validate against all segments from the
                session:
            </para>

            <programlisting language="php">
class RegistrationController extends Zend_Controller_Action
{
    // ...

    /**
     * Is the sub form valid?
     *
     * @param  Zend_Form_SubForm $subForm
     * @param  array $data
     * @return bool
     */
    public function subFormIsValid(Zend_Form_SubForm $subForm,
                                   array $data)
    {
        $name = $subForm-&gt;getName();
        if ($subForm-&gt;isValid($data)) {
            $this-&gt;getSessionNamespace()-&gt;$name = $subForm-&gt;getValues();
            return true;
        }

        return false;
    }

    /**
     * Is the full form valid?
     *
     * @return bool
     */
    public function formIsValid()
    {
        $data = array();
        foreach ($this-&gt;getSessionNamespace() as $key =&gt; $info) {
            $data[$key] = $info;
        }

        return $this-&gt;getForm()-&gt;isValid($data);
    }
}
</programlisting>

            <para>
                Now that we have the legwork out of the way, let's build the
                actions for this controller. We'll need a landing page for the
                form, and then a 'process' action for processing the form.
            </para>

            <programlisting language="php">
class RegistrationController extends Zend_Controller_Action
{
    // ...

    public function indexAction()
    {
        // Either re-display the current page, or grab the "next"
        // (first) sub form
        if (!$form = $this-&gt;getCurrentSubForm()) {
            $form = $this-&gt;getNextSubForm();
        }
        $this-&gt;view-&gt;form = $this-&gt;getForm()-&gt;prepareSubForm($form);
    }

    public function processAction()
    {
        if (!$form = $this-&gt;getCurrentSubForm()) {
            return $this-&gt;_forward('index');
        }

        if (!$this-&gt;subFormIsValid($form,
                                   $this-&gt;getRequest()-&gt;getPost())) {
            $this-&gt;view-&gt;form = $this-&gt;getForm()-&gt;prepareSubForm($form);
            return $this-&gt;render('index');
        }

        if (!$this-&gt;formIsValid()) {
            $form = $this-&gt;getNextSubForm();
            $this-&gt;view-&gt;form = $this-&gt;getForm()-&gt;prepareSubForm($form);
            return $this-&gt;render('index');
        }

        // Valid form!
        // Render information in a verification page
        $this-&gt;view-&gt;info = $this-&gt;getSessionNamespace();
        $this-&gt;render('verification');
    }
}
</programlisting>

            <para>
                As you'll notice, the actual code for processing the form is
                relatively simple. We check to see if we have a current sub form
                submission, and if not, we go back to the landing page. If we do
                have a sub form, we attempt to validate it, redisplaying it if
                it fails. If the sub form is valid, we then check to see if the
                form is valid, which would indicate we're done; if not, we
                display the next form segment. Finally, we display a
                verification page with the contents of the session.
            </para>

            <para>
                The view scripts are very simple:
            </para>

            <programlisting language="php">
&lt;?php // registration/index.phtml ?&gt;
&lt;h2&gt;Registration&lt;/h2&gt;
&lt;?php echo $this-&gt;form ?&gt;

&lt;?php // registration/verification.phtml ?&gt;
&lt;h2&gt;Thank you for registering!&lt;/h2&gt;
&lt;p&gt;
    Here is the information you provided:
&lt;/p&gt;

&lt;?
// Have to do this construct due to how items are stored in session
// namespaces
foreach ($this-&gt;info as $info):
    foreach ($info as $form =&gt; $data): ?&gt;
&lt;h4&gt;&lt;?php echo ucfirst($form) ?&gt;:&lt;/h4&gt;
&lt;dl&gt;
    &lt;?php foreach ($data as $key =&gt; $value): ?&gt;
    &lt;dt&gt;&lt;?php echo ucfirst($key) ?&gt;&lt;/dt&gt;
    &lt;?php if (is_array($value)):
        foreach ($value as $label =&gt; $val): ?&gt;
    &lt;dd&gt;&lt;?php echo $val ?&gt;&lt;/dd&gt;
        &lt;?php endforeach;
       else: ?&gt;
    &lt;dd&gt;&lt;?php echo $this-&gt;escape($value) ?&gt;&lt;/dd&gt;
    &lt;?php endif;
    endforeach; ?&gt;
&lt;/dl&gt;
&lt;?php endforeach;
endforeach ?&gt;
</programlisting>

            <para>
                Upcoming releases of Zend Framework will include components to
                make multi page forms simpler by abstracting the session and
                ordering logic. In the meantime, the above example should serve
                as a reasonable guideline on how to accomplish this task for
                your site.
            </para>
        </example>
    </section>
</section>

<?xml version="1.0" encoding="utf-8"?>


<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.gdata.spreadsheets"><info><title>Using Google Spreadsheets</title></info>
    

    <para>
        The Google Spreadsheets data <acronym>API</acronym> allows client applications to view
        and update Spreadsheets content in the form of Google data <acronym>API</acronym> feeds.
        Your client application can request a list of a user's spreadsheets,
        edit or delete content in an existing Spreadsheets worksheet, and
        query the content in an existing Spreadsheets worksheet.
    </para>

    <para>
        See <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://code.google.com/apis/spreadsheets/overview.html">http://code.google.com/apis/spreadsheets/overview.html</link>
        for more information about the Google Spreadsheets <acronym>API</acronym>.
    </para>

    <section xml:id="zend.gdata.spreadsheets.creating"><info><title>Create a Spreadsheet</title></info>
        

        <para>
            The Spreadsheets data <acronym>API</acronym> does not currently provide a way to
            programmatically create or delete a spreadsheet.
        </para>
    </section>

    <section xml:id="zend.gdata.spreadsheets.listspreadsheets"><info><title>Get a List of Spreadsheets</title></info>
        

        <para>
            You can get a list of spreadsheets for a particular user by using
            the <methodname>getSpreadsheetFeed()</methodname> method of the Spreadsheets
            service. The service will return a
            <classname>Zend_Gdata_Spreadsheets_SpreadsheetFeed</classname> object
            containing a list of spreadsheets associated with the authenticated
            user.
        </para>

        <programlisting language="php">
$service = Zend_Gdata_Spreadsheets::AUTH_SERVICE_NAME;
$client = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
$spreadsheetService = new Zend_Gdata_Spreadsheets($client);
$feed = $spreadsheetService-&gt;getSpreadsheetFeed();
</programlisting>
    </section>

     <section xml:id="zend.gdata.spreadsheets.listworksheets"><info><title>Get a List of Worksheets</title></info>
        

        <para>
            A given spreadsheet may contain multiple worksheets. For each
            spreadsheet, there's a worksheets metafeed listing all the
            worksheets in that spreadsheet.
        </para>

        <para>
            Given the spreadsheet key from the &lt;id&gt; of a
            <classname>Zend_Gdata_Spreadsheets_SpreadsheetEntry</classname>
            object you've already retrieved, you can fetch a feed
            containing a list of worksheets associated with that spreadsheet.
        </para>

        <programlisting language="php">
$query = new Zend_Gdata_Spreadsheets_DocumentQuery();
$query-&gt;setSpreadsheetKey($spreadsheetKey);
$feed = $spreadsheetService-&gt;getWorksheetFeed($query);
</programlisting>

        <para>
            The resulting <classname>Zend_Gdata_Spreadsheets_WorksheetFeed</classname>
            object feed represents the response from the server. Among other
            things, this feed contains a list of
            <classname>Zend_Gdata_Spreadsheets_WorksheetEntry </classname>
            objects (<command>$feed-&gt;entries</command>), each of which represents a
            single worksheet.
        </para>
    </section>

    <section xml:id="zend.gdata.spreadsheets.listfeeds"><info><title>Interacting With List-based Feeds</title></info>
        

        <para>
            A given worksheet generally contains multiple rows, each
            containing multiple cells. You can request data from the
            worksheet either as a list-based feed, in which each entry
            represents a row, or as a cell-based feed, in which each
            entry represents a single cell. For information on cell-based feeds, see <link linkend="zend.gdata.spreadsheets.cellfeeds">Interacting with cell-based
                feeds</link>.
        </para>

        <para>
            The following sections describe how to get a list-based feed,
            add a row to a worksheet, and send queries with various query
            parameters.
        </para>

        <para>
            The list feed makes some assumptions about how the data is laid
            out in the spreadsheet.
        </para>

        <para>
            In particular, the list feed treats the first row of the
            worksheet as a header row; Spreadsheets dynamically creates
            <acronym>XML</acronym> elements named after the contents of header-row cells.
            Users who want to provide Gdata feeds should not put any data
            other than column headers in the first row of a worksheet.
        </para>

        <para>
            The list feed contains all rows after the first row up to the
            first blank row. The first blank row terminates the data set.
            If expected data isn't appearing in a feed, check the worksheet
            manually to see whether there's an unexpected blank row in the
            middle of the data. In particular, if the second row of the
            spreadsheet is blank, then the list feed will contain no data.
        </para>

        <para>
            A row in a list feed is as many columns wide as the worksheet itself.
        </para>

        <section xml:id="zend.gdata.spreadsheets.listfeeds.get"><info><title>Get a List-based Feed</title></info>
            

            <para>
                To retrieve a worksheet's list feed, use the
                <methodname>getListFeed()</methodname> method of the Spreadsheets service.
            </para>

            <programlisting language="php">
$query = new Zend_Gdata_Spreadsheets_ListQuery();
$query-&gt;setSpreadsheetKey($spreadsheetKey);
$query-&gt;setWorksheetId($worksheetId);
$listFeed = $spreadsheetService-&gt;getListFeed($query);
</programlisting>

            <para>
                The resulting <classname>Zend_Gdata_Spreadsheets_ListFeed</classname>
                object <varname>$listfeed</varname> represents a response from the
                server. Among other things, this feed contains an array of
                <classname>Zend_Gdata_Spreadsheets_ListEntry</classname> objects
                (<command>$listFeed-&gt;entries</command>), each of which represents
                a single row in a worksheet.
            </para>

            <para>
                Each <classname>Zend_Gdata_Spreadsheets_ListEntry</classname> contains an
                array, <property>custom</property>, which contains the data for that
                row. You can extract and display this array:
            </para>

            <programlisting language="php">
$rowData = $listFeed-&gt;entries[1]-&gt;getCustom();
foreach($rowData as $customEntry) {
  echo $customEntry-&gt;getColumnName() . " = " . $customEntry-&gt;getText();
}
</programlisting>

            <para>
                An alternate version of this array, <property>customByName</property>,
                allows direct access to an entry's cells by name. This is
                convenient when trying to access a specific header:
            </para>

            <programlisting language="php">
$customEntry = $listFeed-&gt;entries[1]-&gt;getCustomByName('my_heading');
echo $customEntry-&gt;getColumnName() . " = " . $customEntry-&gt;getText();
</programlisting>
        </section>

        <section xml:id="zend.gdata.spreadsheets.listfeeds.reverse"><info><title>Reverse-sort Rows</title></info>
            

            <para>
                By default, rows in the feed appear in the same order as the
                corresponding rows in the GUI; that is, they're in order by
                row number. To get rows in reverse order, set the reverse
                properties of the <classname>Zend_Gdata_Spreadsheets_ListQuery</classname>
                object to <constant>TRUE</constant>:
            </para>

            <programlisting language="php">
$query = new Zend_Gdata_Spreadsheets_ListQuery();
$query-&gt;setSpreadsheetKey($spreadsheetKey);
$query-&gt;setWorksheetId($worksheetId);
$query-&gt;setReverse('true');
$listFeed = $spreadsheetService-&gt;getListFeed($query);
</programlisting>

            <para>
                Note that if you want to order (or reverse sort) by a
                particular column, rather than by position in the worksheet,
                you can set the <property>orderby</property> value of the
                <classname>Zend_Gdata_Spreadsheets_ListQuery</classname> object to
                <emphasis>column:&lt;the header of that column&gt;</emphasis>.
            </para>
        </section>

        <section xml:id="zend.gdata.spreadsheets.listfeeds.sq"><info><title>Send a Structured Query</title></info>
            

            <para>
                You can set a <classname>Zend_Gdata_Spreadsheets_ListQuery</classname>'s
                <property>sq</property> value to produce a feed with entries that meet
                the specified criteria. For example, suppose you have a worksheet
                containing personnel data, in which each row represents
                information about a single person. You wish to retrieve all rows
                in which the person's name is "John" and the person's age is over
                25. To do so, you would set <property>sq</property> as follows:
            </para>

            <programlisting language="php">
$query = new Zend_Gdata_Spreadsheets_ListQuery();
$query-&gt;setSpreadsheetKey($spreadsheetKey);
$query-&gt;setWorksheetId($worksheetId);
$query-&gt;setSpreadsheetQuery('name=John and age&gt;25');
$listFeed = $spreadsheetService-&gt;getListFeed($query);
</programlisting>
        </section>

        <section xml:id="zend.gdata.spreadsheets.listfeeds.addrow"><info><title>Add a Row</title></info>
            

            <para>
                Rows can be added to a spreadsheet by using the
                <methodname>insertRow()</methodname> method of the Spreadsheet service.
            </para>

            <programlisting language="php">
$insertedListEntry = $spreadsheetService-&gt;insertRow($rowData,
                                                    $spreadsheetKey,
                                                    $worksheetId);
</programlisting>

            <para>
                The <varname>$rowData</varname> parameter contains an array of column
                keys to data values. The method returns a
                <classname>Zend_Gdata_Spreadsheets_SpreadsheetsEntry</classname> object
                which represents the inserted row.
            </para>

            <para>
                Spreadsheets inserts the new row immediately after the last row
                that appears in the list-based feed, which is to say
                immediately before the first entirely blank row.
            </para>
        </section>

        <section xml:id="zend.gdata.spreadsheets.listfeeds.editrow"><info><title>Edit a Row</title></info>
            

            <para>
                Once a <classname>Zend_Gdata_Spreadsheets_ListEntry</classname> object
                is fetched, its rows can be updated by using the
                <methodname>updateRow()</methodname> method of the Spreadsheet service.
            </para>

            <programlisting language="php">
$updatedListEntry = $spreadsheetService-&gt;updateRow($oldListEntry,
                                                   $newRowData);
</programlisting>

            <para>
                The <varname>$oldListEntry</varname> parameter contains the list entry
                to be updated. <varname>$newRowData</varname> contains an array of
                column keys to data values, to be used as the new row data.
                The method returns a
                <classname>Zend_Gdata_Spreadsheets_SpreadsheetsEntry</classname> object
                which represents the updated row.
            </para>
        </section>

        <section xml:id="zend.gdata.spreadsheets.listfeeds.deleterow"><info><title>Delete a Row</title></info>
            

            <para>
                To delete a row, simply invoke <methodname>deleteRow()</methodname> on the
                <classname>Zend_Gdata_Spreadsheets</classname> object with the existing
                entry to be deleted:
            </para>

            <programlisting language="php">
$spreadsheetService-&gt;deleteRow($listEntry);
</programlisting>

            <para>
                Alternatively, you can call the <methodname>delete()</methodname> method of
                the entry itself:
            </para>

            <programlisting language="php">
$listEntry-&gt;delete();
</programlisting>
        </section>
    </section>

    <section xml:id="zend.gdata.spreadsheets.cellfeeds"><info><title>Interacting With Cell-based Feeds</title></info>
        

        <para>
            In a cell-based feed, each entry represents a single cell.
        </para>

        <para>
            Note that we don't recommend interacting with both a cell-based
            feed and a list-based feed for the same worksheet at the same time.
        </para>

        <section xml:id="zend.gdata.spreadsheets.cellfeeds.get"><info><title>Get a Cell-based Feed</title></info>
            

            <para>
                To retrieve a worksheet's cell feed, use the
                <methodname>getCellFeed()</methodname> method of the Spreadsheets service.
            </para>

            <programlisting language="php">
$query = new Zend_Gdata_Spreadsheets_CellQuery();
$query-&gt;setSpreadsheetKey($spreadsheetKey);
$query-&gt;setWorksheetId($worksheetId);
$cellFeed = $spreadsheetService-&gt;getCellFeed($query);
</programlisting>

            <para>
                The resulting <classname>Zend_Gdata_Spreadsheets_CellFeed</classname>
                object <varname>$cellFeed</varname> represents a response from the
                server. Among other things, this feed contains an array of
                <classname>Zend_Gdata_Spreadsheets_CellEntry</classname> objects
                (<command>$cellFeed&gt;entries</command>), each of which represents
                a single cell in a worksheet. You can display this information:
            </para>

            <programlisting language="php">
foreach($cellFeed as $cellEntry) {
  $row = $cellEntry-&gt;cell-&gt;getRow();
  $col = $cellEntry-&gt;cell-&gt;getColumn();
  $val = $cellEntry-&gt;cell-&gt;getText();
  echo "$row, $col = $val\n";
}
</programlisting>
        </section>

        <section xml:id="zend.gdata.spreadsheets.cellfeeds.cellrangequery"><info><title>Send a Cell Range Query</title></info>
            

            <para>
                Suppose you wanted to retrieve the cells in the first column
                of a worksheet. You can request a cell feed containing only
                this column as follows:
            </para>

            <programlisting language="php">
$query = new Zend_Gdata_Spreadsheets_CellQuery();
$query-&gt;setMinCol(1);
$query-&gt;setMaxCol(1);
$query-&gt;setMinRow(2);
$feed = $spreadsheetService-&gt;getCellsFeed($query);
</programlisting>

            <para>
                This requests all the data in column 1, starting with row 2.
            </para>
        </section>

        <section xml:id="zend.gdata.spreadsheets.cellfeeds.updatecell"><info><title>Change Contents of a Cell</title></info>
            

            <para>
                To modify the contents of a cell, call
                <methodname>updateCell()</methodname> with the row, column,
                and new value of the cell.
            </para>

            <programlisting language="php">
$updatedCell = $spreadsheetService-&gt;updateCell($row,
                                               $col,
                                               $inputValue,
                                               $spreadsheetKey,
                                               $worksheetId);
</programlisting>

            <para>
                The new data is placed in the specified cell in the worksheet.
                If the specified cell contains data already, it will be
                overwritten. Note: Use <methodname>updateCell()</methodname> to change
                the data in a cell, even if the cell is empty.
            </para>
        </section>
    </section>
</section>

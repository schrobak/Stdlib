<?xml version="1.0" encoding="utf-8"?>


<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.feed.modifying-feed"><info><title>Modifying Feed and Entry structures</title></info>
    

    <para>
        <classname>Zend_Feed</classname>'s natural syntax extends to constructing and modifying
        feeds and entries as well as reading them. You can easily turn your new or modified objects
        back into well-formed <acronym>XML</acronym> for saving to a file or sending to a server.
    </para>

    <example xml:id="zend.feed.modifying-feed.example.modifying"><info><title>Modifying an Existing Feed Entry</title></info>
        

        <programlisting language="php">
$feed = new Zend_Feed_Atom('http://atom.example.com/feed/1');
$entry = $feed-&gt;current();

$entry-&gt;title = 'This is a new title';
$entry-&gt;author-&gt;email = 'my_email@example.com';

echo $entry-&gt;saveXML();
</programlisting>

        <para>
            This will output a full (includes <command>&lt;?xml ... &gt;</command> prologue)
            <acronym>XML</acronym> representation of the new entry, including any necessary
            <acronym>XML</acronym> namespaces.
        </para>

        <para>
            Note that the above will work even if the existing entry does not already have an author
            tag. You can use as many levels of <command>-&gt;</command> access as you like before
            getting to an assignment; all of the intervening levels will be created for you
            automatically if necessary.
        </para>
    </example>

    <para>
        If you want to use a namespace other than <command>atom:</command>, <command>rss:</command>,
        or <command>osrss:</command> in your entry, you need to register the namespace with
        <classname>Zend_Feed</classname> using
        <methodname>Zend_Feed::registerNamespace()</methodname>. When you are modifying an existing
        element, it will always maintain its original namespace. When adding a new element, it will
        go into the default namespace if you do not explicitly specify another namespace.
    </para>

    <example xml:id="zend.feed.modifying-feed.example.creating"><info><title>Creating an Atom Entry with Elements of Custom Namespaces</title></info>
        

        <programlisting language="php">
$entry = new Zend_Feed_Entry_Atom();
// id is always assigned by the server in Atom
$entry-&gt;title = 'my custom entry';
$entry-&gt;author-&gt;name = 'Example Author';
$entry-&gt;author-&gt;email = 'me@example.com';

// Now do the custom part.
Zend_Feed::registerNamespace('myns', 'http://www.example.com/myns/1.0');

$entry-&gt;{'myns:myelement_one'} = 'my first custom value';
$entry-&gt;{'myns:container_elt'}-&gt;part1 = 'first nested custom part';
$entry-&gt;{'myns:container_elt'}-&gt;part2 = 'second nested custom part';

echo $entry-&gt;saveXML();
</programlisting>
    </example>
</section>

<?xml version="1.0" encoding="utf-8"?>
<!-- Converted by db4-upgrade version 1.0 -->

<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.service.simpy"><info><title>Zend_Service_Simpy</title></info>
    

    <section xml:id="zend.service.simpy.introduction"><info><title>Introduction</title></info>
        

        <para>
            <classname>Zend_Service_Simpy</classname> is a lightweight wrapper for the free REST
            <acronym>API</acronym> available for the Simpy social bookmarking service.
        </para>

        <para>
            In order to use <classname>Zend_Service_Simpy</classname>, you should already have a
            Simpy account. To get an account, visit the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://simpy.com">Simpy web site</link>. For more information on the Simpy
            REST <acronym>API</acronym>, refer to the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.simpy.com/doc/api/rest">Simpy REST <acronym>API</acronym>
                documentation</link>.
        </para>

        <para>
            The Simpy REST <acronym>API</acronym> allows developers to interact with specific
            aspects of the service that the Simpy web site offers. The sections following will
            outline the use of <classname>Zend_Service_Simpy</classname> for each of these areas.

            <itemizedlist>
                <listitem>
                    <para>
                        Links: Create, Retrieve, Update, Delete
                    </para>
                </listitem>

                <listitem>
                    <para>
                        Tags: Retrieve, Delete, Rename, Merge, Split
                    </para>
                </listitem>

                <listitem>
                    <para>
                        Notes: Create, Retrieve, Update, Delete
                    </para>
                </listitem>

                <listitem>
                    <para>
                        Watchlists: Get, Get All
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </section>

    <section xml:id="zend.service.simpy.links"><info><title>Links</title></info>
        

        <para>
            When querying links, results are returned in descending order by date added. Links can
            be searched by title, nickname, tags, note, or even the content of the web page
            associated with the link. Simpy offers searching by any or all of these fields with
            phrases, boolean operators, and wildcards. See the
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.simpy.com/faq#searchSyntax">search syntax</link> and
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.simpy.com/faq#searchFieldsLinks">search fields</link>
            sections of the Simpy FAQ for more information.
        </para>

        <example xml:id="zend.service.simpy.links.querying"><info><title>Querying Links</title></info>
            

            <programlisting language="php">
$simpy = new Zend_Service_Simpy('yourusername', 'yourpassword');

/* Search for the 10 links added most recently */
$linkQuery = new Zend_Service_Simpy_LinkQuery();
$linkQuery-&gt;setLimit(10);

/* Get and display the links */
$linkSet = $simpy-&gt;getLinks($linkQuery);
foreach ($linkSet as $link) {
    echo '&lt;a href="';
    echo $link-&gt;getUrl();
    echo '"&gt;';
    echo $link-&gt;getTitle();
    echo '&lt;/a&gt;&lt;br /&gt;';
}

/* Search for the 5 links added most recently with 'PHP' in
the title */
$linkQuery-&gt;setQueryString('title:PHP');
$linkQuery-&gt;setLimit(5);

/* Search for all links with 'French' in the title and
'language' in the tags */
$linkQuery-&gt;setQueryString('+title:French +tags:language');

/* Search for all links with 'French' in the title and without
'travel' in the tags */
$linkQuery-&gt;setQueryString('+title:French -tags:travel');

/* Search for all links added on 12/9/06 */
$linkQuery-&gt;setDate('2006-12-09');

/* Search for all links added after 12/9/06 (excluding that
date) */
$linkQuery-&gt;setAfterDate('2006-12-09');

/* Search for all links added before 12/9/06 (excluding that
date) */
$linkQuery-&gt;setBeforeDate('2006-12-09');

/* Search for all links added between 12/1/06 and 12/9/06
(excluding those two dates) */
$linkQuery-&gt;setBeforeDate('2006-12-01');
$linkQuery-&gt;setAfterDate('2006-12-09');
</programlisting>
        </example>

        <para>
            Links are represented uniquely by their <acronym>URL</acronym>s. In other words, if an
            attempt is made to save a link that has the same <acronym>URL</acronym> as an existing
            link, data for the existing link will be overwritten with the data specified in the save
            attempt.
        </para>

        <example xml:id="zend.service.simpy.links.modifying"><info><title>Modifying Links</title></info>
            

            <programlisting language="php">
$simpy = new Zend_Service_Simpy('yourusername', 'yourpassword');

/* Save a link */
$simpy-&gt;saveLink(
    'Zend Framework' // Title
    'http://framework.zend.com', // URL
    Zend_Service_Simpy_Link::ACCESSTYPE_PUBLIC, // Access Type
    'zend, framework, php' // Tags
    'Zend Framework home page' // Alternative title
    'This site rocks!' // Note
);

/* Overwrite the existing link with new data */
$simpy-&gt;saveLink(
    'Zend Framework'
    'http://framework.zend.com',
    Zend_Service_Simpy_Link::ACCESSTYPE_PRIVATE, // Access Type has changed
    'php, zend, framework' // Tags have changed order
    'Zend Framework' // Alternative title has changed
    'This site REALLY rocks!' // Note has changed
);

/* Delete the link */
$simpy-&gt;deleteLink('http://framework.zend.com');

/* A really easy way to do spring cleaning on your links ;) */
$linkSet = $this-&gt;_simpy-&gt;getLinks();
foreach ($linkSet as $link) {
    $this-&gt;_simpy-&gt;deleteLink($link-&gt;getUrl());
}
</programlisting>
        </example>
    </section>

    <section xml:id="zend.service.simpy.tags"><info><title>Tags</title></info>
        

        <para>
            When retrieved, tags are sorted in decreasing order (i.e. highest
            first) by the number of links that use the tag.
        </para>

        <example xml:id="zend.service.simpy.tags.working"><info><title>Working With Tags</title></info>
            

            <programlisting language="php">
$simpy = new Zend_Service_Simpy('yourusername', 'yourpassword');

/* Save a link with tags */
$simpy-&gt;saveLink(
    'Zend Framework' // Title
    'http://framework.zend.com', // URL
    Zend_Service_Simpy_Link::ACCESSTYPE_PUBLIC, // Access Type
    'zend, framework, php' // Tags
);

/* Get a list of all tags in use by links and notes */
$tagSet = $simpy-&gt;getTags();

/* Display each tag with the number of links using it */
foreach ($tagSet as $tag) {
    echo $tag-&gt;getTag();
    echo ' - ';
    echo $tag-&gt;getCount();
    echo '&lt;br /&gt;';
}

/* Remove the 'zend' tag from all links using it */
$simpy-&gt;removeTag('zend');

/* Rename the 'framework' tag to 'frameworks' */
$simpy-&gt;renameTag('framework', 'frameworks');

/* Split the 'frameworks' tag into 'framework' and
'development', which will remove the 'frameworks' tag for
all links that use it and add the tags 'framework' and
'development' to all of those links */
$simpy-&gt;splitTag('frameworks', 'framework', 'development');

/* Merge the 'framework' and 'development' tags back into
'frameworks', basically doing the opposite of splitting them */
$simpy-&gt;mergeTags('framework', 'development', 'frameworks');
</programlisting>
        </example>
    </section>

    <section xml:id="zend.service.simpy.notes"><info><title>Notes</title></info>
        

        <para>
            Notes can be saved, retrieved, and deleted. They are uniquely
            identified by a numeric ID value.
        </para>

        <example xml:id="zend.service.simpy.notes.working"><info><title>Working With Notes</title></info>
            

            <programlisting language="php">
$simpy = new Zend_Service_Simpy('yourusername', 'yourpassword');

/* Save a note */
$simpy-&gt;saveNote(
    'Test Note', // Title
    'test,note', // Tags
    'This is a test note.' // Description
);

/* Overwrite an existing note */
$simpy-&gt;saveNote(
    'Updated Test Note', // Title
    'test,note,updated', // Tags
    'This is an updated test note.', // Description
    $note-&gt;getId() // Unique identifier
);

/* Search for the 10 most recently added notes */
$noteSet = $simpy-&gt;getNotes(null, 10);

/* Display the notes */
foreach ($noteSet as $note) {
    echo '&lt;p&gt;';
    echo $note-&gt;getTitle();
    echo '&lt;br /&gt;';
    echo $note-&gt;getDescription();
    echo '&lt;br &gt;';
    echo $note-&gt;getTags();
    echo '&lt;/p&gt;';
}

/* Search for all notes with 'PHP' in the title */
$noteSet = $simpy-&gt;getNotes('title:PHP');

/* Search for all notes with 'PHP' in the title and
without 'framework' in the description */
$noteSet = $simpy-&gt;getNotes('+title:PHP -description:framework');

/* Delete a note */
$simpy-&gt;deleteNote($note-&gt;getId());
</programlisting>
        </example>
    </section>

    <section xml:id="zend.service.simpy.watchlists"><info><title>Watchlists</title></info>
        

        <para>
            Watchlists cannot be created or removed using the <acronym>API</acronym>, only
            retrieved. Thus, you must set up a watchlist via the Simpy web
            site prior to attempting to access it using the <acronym>API</acronym>.
        </para>

        <example xml:id="zend.service.simpy.watchlists.retrieving"><info><title>Retrieving Watchlists</title></info>
            

            <programlisting language="php">
$simpy = new Zend_Service_Simpy('yourusername', 'yourpassword');

/* Get a list of all watchlists */
$watchlistSet = $simpy-&gt;getWatchlists();

/* Display data for each watchlist */
foreach ($watchlistSet as $watchlist) {
    echo $watchlist-&gt;getId();
    echo '&lt;br /&gt;';
    echo $watchlist-&gt;getName();
    echo '&lt;br /&gt;';
    echo $watchlist-&gt;getDescription();
    echo '&lt;br /&gt;';
    echo $watchlist-&gt;getAddDate();
    echo '&lt;br /&gt;';
    echo $watchlist-&gt;getNewLinks();
    echo '&lt;br /&gt;';

    foreach ($watchlist-&gt;getUsers() as $user) {
        echo $user;
        echo '&lt;br /&gt;';
    }

    foreach ($watchlist-&gt;getFilters() as $filter) {
        echo $filter-&gt;getName();
        echo '&lt;br /&gt;';
        echo $filter-&gt;getQuery();
        echo '&lt;br /&gt;';
    }
}

/* Get an individual watchlist by its identifier */
$watchlist = $simpy-&gt;getWatchlist($watchlist-&gt;getId());
$watchlist = $simpy-&gt;getWatchlist(1);
</programlisting>
        </example>
    </section>
</section>

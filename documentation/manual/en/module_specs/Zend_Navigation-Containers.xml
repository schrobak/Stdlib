<?xml version="1.0" encoding="utf-8"?>


<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.navigation.containers"><info><title>Containers</title></info>
    

    <para>
        Containers have methods for adding, retrieving, deleting and
        iterating pages. Containers implement the
        <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://php.net/spl">SPL</link> interfaces
        <classname>RecursiveIterator</classname> and
        <classname>Countable</classname>, meaning that a container can
        be iterated using the SPL
        <classname>RecursiveIteratorIterator</classname> class.
    </para>

    <section xml:id="zend.navigation.containers.creating"><info><title>Creating containers</title></info>
        

        <para>
            <classname>Zend_Navigation_Container</classname> is
            abstract, and can not be instantiated directly. Use
            <classname>Zend_Navigation</classname> if you want to
            instantiate a container.
        </para>

        <para>
            <classname>Zend_Navigation</classname> can be constructed
            entirely empty, or take an array or a
            <classname>Zend_Config</classname> object with pages to put in the
            container. Each page in the given array/config will eventually be
            passed to the <methodname>addPage()</methodname> method of the container class,
            which means that each element in the array/config can be an array or
            a config object, or a <classname>Zend_Navigation_Page</classname>
            instance.
        </para>

        <example xml:id="zend.navigation.containers.creating.example.array"><info><title>Creating a container using an array</title></info>
            

            <programlisting language="php">
/*
 * Create a container from an array
 *
 * Each element in the array will be passed to
 * Zend_Navigation_Page::factory() when constructing.
 */
$container = new Zend_Navigation(array(
    array(
        'label' =&gt; 'Page 1',
        'id' =&gt; 'home-link',
        'uri' =&gt; '/'
    ),
    array(
        'label' =&gt; 'Zend',
        'uri' =&gt; 'http://www.zend-project.com/',
        'order' =&gt; 100
    ),
    array(
        'label' =&gt; 'Page 2',
        'controller' =&gt; 'page2',
        'pages' =&gt; array(
            array(
                'label' =&gt; 'Page 2.1',
                'action' =&gt; 'page2_1',
                'controller' =&gt; 'page2',
                'class' =&gt; 'special-one',
                'title' =&gt; 'This element has a special class',
                'active' =&gt; true
            ),
            array(
                'label' =&gt; 'Page 2.2',
                'action' =&gt; 'page2_2',
                'controller' =&gt; 'page2',
                'class' =&gt; 'special-two',
                'title' =&gt; 'This element has a special class too'
            )
        )
    ),
    array(
        'label' =&gt; 'Page 2 with params',
        'action' =&gt; 'index',
        'controller' =&gt; 'page2',
        // specify a param or two
        'params' =&gt; array(
            'format' =&gt; 'json',
            'foo' =&gt; 'bar'
        )
    ),
    array(
        'label' =&gt; 'Page 2 with params and a route',
        'action' =&gt; 'index',
        'controller' =&gt; 'page2',
        // specify a route name and a param for the route
        'route' =&gt; 'nav-route-example',
        'params' =&gt; array(
            'format' =&gt; 'json'
        )
    ),
    array(
        'label' =&gt; 'Page 3',
        'action' =&gt; 'index',
        'controller' =&gt; 'index',
        'module' =&gt; 'mymodule',
        'reset_params' =&gt; false
    ),
    array(
        'label' =&gt; 'Page 4',
        'uri' =&gt; '#',
        'pages' =&gt; array(
            array(
                'label' =&gt; 'Page 4.1',
                'uri' =&gt; '/page4',
                'title' =&gt; 'Page 4 using uri',
                'pages' =&gt; array(
                    array(
                        'label' =&gt; 'Page 4.1.1',
                        'title' =&gt; 'Page 4 using mvc params',
                        'action' =&gt; 'index',
                        'controller' =&gt; 'page4',
                        // let's say this page is active
                        'active' =&gt; '1'
                    )
                )
            )
        )
    ),
    array(
        'label' =&gt; 'Page 0?',
        'uri' =&gt; '/setting/the/order/option',
        // setting order to -1 should make it appear first
        'order' =&gt; -1
    ),
    array(
        'label' =&gt; 'Page 5',
        'uri' =&gt; '/',
        // this page should not be visible
        'visible' =&gt; false,
        'pages' =&gt; array(
            array(
                'label' =&gt; 'Page 5.1',
                'uri' =&gt; '#',
                'pages' =&gt; array(
                    array(
                        'label' =&gt; 'Page 5.1.1',
                        'uri' =&gt; '#',
                        'pages' =&gt; array(
                            array(
                                'label' =&gt; 'Page 5.1.2',
                                'uri' =&gt; '#',
                                // let's say this page is active
                                'active' =&gt; true
                            )
                        )
                    )
                )
            )
        )
    ),
    array(
        'label' =&gt; 'ACL page 1 (guest)',
        'uri' =&gt; '#acl-guest',
        'resource' =&gt; 'nav-guest',
        'pages' =&gt; array(
            array(
                'label' =&gt; 'ACL page 1.1 (foo)',
                'uri' =&gt; '#acl-foo',
                'resource' =&gt; 'nav-foo'
            ),
            array(
                'label' =&gt; 'ACL page 1.2 (bar)',
                'uri' =&gt; '#acl-bar',
                'resource' =&gt; 'nav-bar'
            ),
            array(
                'label' =&gt; 'ACL page 1.3 (baz)',
                'uri' =&gt; '#acl-baz',
                'resource' =&gt; 'nav-baz'
            ),
            array(
                'label' =&gt; 'ACL page 1.4 (bat)',
                'uri' =&gt; '#acl-bat',
                'resource' =&gt; 'nav-bat'
            )
        )
    ),
    array(
        'label' =&gt; 'ACL page 2 (member)',
        'uri' =&gt; '#acl-member',
        'resource' =&gt; 'nav-member'
    ),
    array(
        'label' =&gt; 'ACL page 3 (admin',
        'uri' =&gt; '#acl-admin',
        'resource' =&gt; 'nav-admin',
        'pages' =&gt; array(
            array(
                'label' =&gt; 'ACL page 3.1 (nothing)',
                'uri' =&gt; '#acl-nada'
            )
        )
    ),
    array(
        'label' =&gt; 'Zend Framework',
        'route' =&gt; 'zf-route'
    )
));
</programlisting>
        </example>

        <example xml:id="zend.navigation.containers.creating.example.config"><info><title>Creating a container using a config object</title></info>
            

            <programlisting language="php">
/* CONTENTS OF /path/to/navigation.xml:
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;config&gt;
    &lt;nav&gt;

        &lt;zend&gt;
            &lt;label&gt;Zend&lt;/label&gt;
            &lt;uri&gt;http://www.zend-project.com/&lt;/uri&gt;
            &lt;order&gt;100&lt;/order&gt;
        &lt;/zend&gt;

        &lt;page1&gt;
            &lt;label&gt;Page 1&lt;/label&gt;
            &lt;uri&gt;page1&lt;/uri&gt;
            &lt;pages&gt;

                &lt;page1_1&gt;
                    &lt;label&gt;Page 1.1&lt;/label&gt;
                    &lt;uri&gt;page1/page1_1&lt;/uri&gt;
                &lt;/page1_1&gt;

            &lt;/pages&gt;
        &lt;/page1&gt;

        &lt;page2&gt;
            &lt;label&gt;Page 2&lt;/label&gt;
            &lt;uri&gt;page2&lt;/uri&gt;
            &lt;pages&gt;

                &lt;page2_1&gt;
                    &lt;label&gt;Page 2.1&lt;/label&gt;
                    &lt;uri&gt;page2/page2_1&lt;/uri&gt;
                &lt;/page2_1&gt;

                &lt;page2_2&gt;
                    &lt;label&gt;Page 2.2&lt;/label&gt;
                    &lt;uri&gt;page2/page2_2&lt;/uri&gt;
                    &lt;pages&gt;

                        &lt;page2_2_1&gt;
                            &lt;label&gt;Page 2.2.1&lt;/label&gt;
                            &lt;uri&gt;page2/page2_2/page2_2_1&lt;/uri&gt;
                        &lt;/page2_2_1&gt;

                        &lt;page2_2_2&gt;
                            &lt;label&gt;Page 2.2.2&lt;/label&gt;
                            &lt;uri&gt;page2/page2_2/page2_2_2&lt;/uri&gt;
                            &lt;active&gt;1&lt;/active&gt;
                        &lt;/page2_2_2&gt;

                    &lt;/pages&gt;
                &lt;/page2_2&gt;

                &lt;page2_3&gt;
                    &lt;label&gt;Page 2.3&lt;/label&gt;
                    &lt;uri&gt;page2/page2_3&lt;/uri&gt;
                    &lt;pages&gt;

                        &lt;page2_3_1&gt;
                            &lt;label&gt;Page 2.3.1&lt;/label&gt;
                            &lt;uri&gt;page2/page2_3/page2_3_1&lt;/uri&gt;
                        &lt;/page2_3_1&gt;

                        &lt;page2_3_2&gt;
                            &lt;label&gt;Page 2.3.2&lt;/label&gt;
                            &lt;uri&gt;page2/page2_3/page2_3_2&lt;/uri&gt;
                            &lt;visible&gt;0&lt;/visible&gt;
                            &lt;pages&gt;

                                    &lt;page2_3_2_1&gt;
                                        &lt;label&gt;Page 2.3.2.1&lt;/label&gt;
                                        &lt;uri&gt;page2/page2_3/page2_3_2/1&lt;/uri&gt;
                                        &lt;active&gt;1&lt;/active&gt;
                                    &lt;/page2_3_2_1&gt;

                                    &lt;page2_3_2_2&gt;
                                        &lt;label&gt;Page 2.3.2.2&lt;/label&gt;
                                        &lt;uri&gt;page2/page2_3/page2_3_2/2&lt;/uri&gt;
                                        &lt;active&gt;1&lt;/active&gt;

                                        &lt;pages&gt;
                                            &lt;page_2_3_2_2_1&gt;
                                                &lt;label&gt;Ignore&lt;/label&gt;
                                                &lt;uri&gt;#&lt;/uri&gt;
                                                &lt;active&gt;1&lt;/active&gt;
                                            &lt;/page_2_3_2_2_1&gt;
                                        &lt;/pages&gt;
                                    &lt;/page2_3_2_2&gt;

                            &lt;/pages&gt;
                        &lt;/page2_3_2&gt;

                        &lt;page2_3_3&gt;
                            &lt;label&gt;Page 2.3.3&lt;/label&gt;
                            &lt;uri&gt;page2/page2_3/page2_3_3&lt;/uri&gt;
                            &lt;resource&gt;admin&lt;/resource&gt;
                            &lt;pages&gt;

                                    &lt;page2_3_3_1&gt;
                                        &lt;label&gt;Page 2.3.3.1&lt;/label&gt;
                                        &lt;uri&gt;page2/page2_3/page2_3_3/1&lt;/uri&gt;
                                        &lt;active&gt;1&lt;/active&gt;
                                    &lt;/page2_3_3_1&gt;

                                    &lt;page2_3_3_2&gt;
                                        &lt;label&gt;Page 2.3.3.2&lt;/label&gt;
                                        &lt;uri&gt;page2/page2_3/page2_3_3/2&lt;/uri&gt;
                                        &lt;resource&gt;guest&lt;/resource&gt;
                                        &lt;active&gt;1&lt;/active&gt;
                                    &lt;/page2_3_3_2&gt;

                            &lt;/pages&gt;
                        &lt;/page2_3_3&gt;

                    &lt;/pages&gt;
                &lt;/page2_3&gt;

            &lt;/pages&gt;
        &lt;/page2&gt;

        &lt;page3&gt;
            &lt;label&gt;Page 3&lt;/label&gt;
            &lt;uri&gt;page3&lt;/uri&gt;
            &lt;pages&gt;

                &lt;page3_1&gt;
                    &lt;label&gt;Page 3.1&lt;/label&gt;
                    &lt;uri&gt;page3/page3_1&lt;/uri&gt;
                    &lt;resource&gt;guest&lt;/resource&gt;
                &lt;/page3_1&gt;

                &lt;page3_2&gt;
                    &lt;label&gt;Page 3.2&lt;/label&gt;
                    &lt;uri&gt;page3/page3_2&lt;/uri&gt;
                    &lt;resource&gt;member&lt;/resource&gt;
                    &lt;pages&gt;

                        &lt;page3_2_1&gt;
                            &lt;label&gt;Page 3.2.1&lt;/label&gt;
                            &lt;uri&gt;page3/page3_2/page3_2_1&lt;/uri&gt;
                        &lt;/page3_2_1&gt;

                        &lt;page3_2_2&gt;
                            &lt;label&gt;Page 3.2.2&lt;/label&gt;
                            &lt;uri&gt;page3/page3_2/page3_2_2&lt;/uri&gt;
                            &lt;resource&gt;admin&lt;/resource&gt;
                        &lt;/page3_2_2&gt;

                    &lt;/pages&gt;
                &lt;/page3_2&gt;

                &lt;page3_3&gt;
                    &lt;label&gt;Page 3.3&lt;/label&gt;
                    &lt;uri&gt;page3/page3_3&lt;/uri&gt;
                    &lt;resource&gt;special&lt;/resource&gt;
                    &lt;pages&gt;

                        &lt;page3_3_1&gt;
                            &lt;label&gt;Page 3.3.1&lt;/label&gt;
                            &lt;uri&gt;page3/page3_3/page3_3_1&lt;/uri&gt;
                            &lt;visible&gt;0&lt;/visible&gt;
                        &lt;/page3_3_1&gt;

                        &lt;page3_3_2&gt;
                            &lt;label&gt;Page 3.3.2&lt;/label&gt;
                            &lt;uri&gt;page3/page3_3/page3_3_2&lt;/uri&gt;
                            &lt;resource&gt;admin&lt;/resource&gt;
                        &lt;/page3_3_2&gt;

                    &lt;/pages&gt;
                &lt;/page3_3&gt;

            &lt;/pages&gt;
        &lt;/page3&gt;

        &lt;home&gt;
            &lt;label&gt;Home&lt;/label&gt;
            &lt;order&gt;-100&lt;/order&gt;
            &lt;module&gt;default&lt;/module&gt;
            &lt;controller&gt;index&lt;/controller&gt;
            &lt;action&gt;index&lt;/action&gt;
        &lt;/home&gt;

    &lt;/nav&gt;
&lt;/config&gt;
 */

$config = new Zend_Config_Xml('/path/to/navigation.xml', 'nav');
$container = new Zend_Navigation($config);
</programlisting>
        </example>
    </section>

    <section xml:id="zend.navigation.containers.adding"><info><title>Adding pages</title></info>
        

        <para>
            Adding pages to a container can be done with the methods
            <methodname>addPage()</methodname>, <methodname>addPages()</methodname>, or
            <methodname>setPages()</methodname>. See examples below for explanation.
        </para>

        <example xml:id="zend.navigation.containers.adding.example"><info><title>Adding pages to a container</title></info>
            

            <programlisting language="php">
// create container
$container = new Zend_Navigation();

// add page by giving a page instance
$container-&gt;addPage(Zend_Navigation_Page::factory(array(
    'uri' =&gt; 'http://www.example.com/'
)))

// add page by giving an array
$container-&gt;addPage(array(
    'uri' =&gt; 'http://www.example.com/'
)))

// add page by giving a config object
$container-&gt;addPage(new Zend_Config(array(
    'uri' =&gt; 'http://www.example.com/'
)))

$pages = array(
    array(
        'label'  =&gt; 'Save'
        'action' =&gt; 'save',
    ),
    array(
        'label' =&gt;  'Delete',
        'action' =&gt; 'delete'
    )
);

// add two pages
$container-&gt;addPages($pages);

// remove existing pages and add the given pages
$container-&gt;setPages($pages);
</programlisting>
        </example>
    </section>

    <section xml:id="zend.navigation.containers.removing"><info><title>Removing pages</title></info>
        

        <para>
            Removing pages can be done with <methodname>removePage()</methodname> or
            <methodname>removePages()</methodname>. The first method accepts a an instance
            of a page, or an integer. The integer corresponds to the
            <property>order</property> a page has. The latter method will remove all
            pages in the container.
        </para>

        <example xml:id="zend.navigation.containers.removing.example"><info><title>Removing pages from a container</title></info>
            

            <programlisting language="php">
$container = new Zend_Navigation(array(
    array(
        'label'  =&gt; 'Page 1',
        'action' =&gt; 'page1'
    ),
    array(
        'label'  =&gt; 'Page 2',
        'action' =&gt; 'page2',
        'order'  =&gt; 200
    ),
    array(
        'label'  =&gt; 'Page 3',
        'action' =&gt; 'page3'
    )
));

// remove page by implicit page order
$container-&gt;removePage(0);      // removes Page 1

// remove page by instance
$page3 = $container-&gt;findOneByAction('Page 3');
$container-&gt;removePage($page3); // removes Page 3

// remove page by explicit page order
$container-&gt;removePage(200);    // removes Page 2

// remove all pages
$container-&gt;removePages();      // removes all pages
</programlisting>
        </example>
    </section>

    <section xml:id="zend.navigation.containers.finding"><info><title>Finding pages</title></info>
        

        <para>
            Containers have finder methods for retrieving pages.
            They are <methodname>findOneBy($property, $value)</methodname>,
            <methodname>findAllBy($property, $value)</methodname>, and
            <methodname>findBy($property, $value, $all = false)</methodname>.
            Those methods will recursively search the container for
            pages matching the given <command>$page-&gt;$property == $value</command>.
            The first method, <methodname>findOneBy()</methodname>, will return a
            single page matching the property with the given value, or
            <constant>NULL</constant> if it cannot be found. The second method will return
            all pages with a property matching the given value. The third
            method will call one of the two former methods depending on the
            <varname>$all</varname> flag.
        </para>

        <para>
            The finder methods can also be used magically by appending the
            property name to <property>findBy</property>, <property>findOneBy</property>, or
            <property>findAllBy</property>, e.g. <methodname>findOneByLabel('Home')</methodname> to
            return the first matching page with label 'Home'.
            Other combinations are <methodname>findByLabel(...)</methodname>,
            <methodname>findOnyByTitle(...)</methodname>,
            <methodname>findAllByController(...)</methodname>, etc. Finder
            methods also work on custom properties, such as
            <methodname>findByFoo('bar')</methodname>.
        </para>

        <example xml:id="zend.navigation.containers.finding.example"><info><title>Finding pages in a container</title></info>
            

            <programlisting language="php">
$container = new Zend_Navigation(array(
    array(
        'label' =&gt; 'Page 1',
        'uri'   =&gt; 'page-1',
        'foo'   =&gt; 'bar',
        'pages' =&gt; array(
            array(
                'label' =&gt; 'Page 1.1',
                'uri'   =&gt; 'page-1.1',
                'foo'   =&gt; 'bar',
            ),
            array(
                'label' =&gt; 'Page 1.2',
                'uri'   =&gt; 'page-1.2',
                'class' =&gt; 'my-class',
            ),
            array(
                'type'   =&gt; 'uri',
                'label'  =&gt; 'Page 1.3',
                'uri'    =&gt; 'page-1.3',
                'action' =&gt; 'about'
            )
        )
    ),
    array(
        'label'      =&gt; 'Page 2',
        'id'         =&gt; 'page_2_and_3',
        'class'      =&gt; 'my-class',
        'module'     =&gt; 'page2',
        'controller' =&gt; 'index',
        'action'     =&gt; 'page1'
    ),
    array(
        'label'      =&gt; 'Page 3',
        'id'         =&gt; 'page_2_and_3',
        'module'     =&gt; 'page3',
        'controller' =&gt; 'index'
    )
));

// The 'id' is not required to be unique, but be aware that
// having two pages with the same id will render the same id attribute
// in menus and breadcrumbs.
$found = $container-&gt;findBy('id',
                            'page_2_and_3');      // returns Page 2
$found = $container-&gt;findOneBy('id',
                               'page_2_and_3');   // returns Page 2
$found = $container-&gt;findBy('id',
                            'page_2_and_3',
                            true);                // returns Page 2 and Page 3
$found = $container-&gt;findById('page_2_and_3');    // returns Page 2
$found = $container-&gt;findOneById('page_2_and_3'); // returns Page 2
$found = $container-&gt;findAllById('page_2_and_3'); // returns Page 2 and Page 3

// Find all matching CSS class my-class
$found = $container-&gt;findAllBy('class',
                               'my-class');       // returns Page 1.2 and Page 2
$found = $container-&gt;findAllByClass('my-class');  // returns Page 1.2 and Page 2

// Find first matching CSS class my-class
$found = $container-&gt;findOneByClass('my-class');  // returns Page 1.2

// Find all matching CSS class non-existant
$found = $container-&gt;findAllByClass('non-existant'); // returns array()

// Find first matching CSS class non-existant
$found = $container-&gt;findOneByClass('non-existant'); // returns null

// Find all pages with custom property 'foo' = 'bar'
$found = $container-&gt;findAllBy('foo', 'bar'); // returns Page 1 and Page 1.1

// To achieve the same magically, 'foo' must be in lowercase.
// This is because 'foo' is a custom property, and thus the
// property name is not normalized to 'Foo'
$found = $container-&gt;findAllByfoo('bar');

// Find all with controller = 'index'
$found = $container-&gt;findAllByController('index'); // returns Page 2 and Page 3
</programlisting>
        </example>
    </section>

    <section xml:id="zend.navigation.containers.iterating"><info><title>Iterating containers</title></info>
        

        <para>
            <classname>Zend_Navigation_Container</classname> implements
            <classname>RecursiveIteratorIterator</classname>, and can be
            iterated using any <classname>Iterator</classname> class. To iterate
            a container recursively, use the
            <classname>RecursiveIteratorIterator</classname> class.
        </para>

        <example xml:id="zend.navigation.containers.iterating.example"><info><title>Iterating a container</title></info>
            

            <programlisting language="php">
/*
 * Create a container from an array
 */
$container = new Zend_Navigation(array(
    array(
        'label' =&gt; 'Page 1',
        'uri'   =&gt; '#'
    ),
    array(
        'label' =&gt; 'Page 2',
        'uri'   =&gt; '#',
        'pages' =&gt; array(
            array(
                'label' =&gt; 'Page 2.1',
                'uri'   =&gt; '#'
            ),
            array(
                'label' =&gt; 'Page 2.2',
                'uri'   =&gt; '#'
            )
        )
    )
    array(
        'label' =&gt; 'Page 3',
        'uri'   =&gt; '#'
    )
));

// Iterate flat using regular foreach:
// Output: Page 1, Page 2, Page 3
foreach ($container as $page) {
    echo $page-&gt;label;
}

// Iterate recursively using RecursiveIteratorIterator
$it = new RecursiveIteratorIterator(
        $container, RecursiveIteratorIterator::SELF_FIRST);

// Output: Page 1, Page 2, Page 2.1, Page 2.2, Page 3
foreach ($it as $page) {
    echo $page-&gt;label;
}
</programlisting>
        </example>
    </section>

    <section xml:id="zend.navigation.containers.other"><info><title>Other operations</title></info>
        

        <para>
            The method <methodname>hasPage(Zend_Navigation_Page $page)</methodname> checks
            if the container has the given page. The method <methodname>hasPages()</methodname>
            checks if there are any pages in the container, and is equivalent
            to <command>count($container) &gt; 1</command>.
        </para>

        <para>
            The <methodname>toArray()</methodname> method converts the container and the
            pages in it to an array. This can be useful for serializing and
            debugging.
        </para>

        <example xml:id="zend.navigation.containers.other.example.toarray"><info><title>Converting a container to an array</title></info>
            

            <programlisting language="php">
$container = new Zend_Navigation(array(
    array(
        'label' =&gt; 'Page 1',
        'uri'   =&gt; '#'
    ),
    array(
        'label' =&gt; 'Page 2',
        'uri'   =&gt; '#',
        'pages' =&gt; array(
            array(
                'label' =&gt; 'Page 2.1',
                'uri'   =&gt; '#'
            ),
            array(
                'label' =&gt; 'Page 2.2',
               'uri'   =&gt; '#'
            )
        )
    )
));

var_dump($container-&gt;toArray());

/* Output:
array(2) {
  [0]=&gt; array(15) {
    ["label"]=&gt; string(6) "Page 1"
    ["id"]=&gt; NULL
    ["class"]=&gt; NULL
    ["title"]=&gt; NULL
    ["target"]=&gt; NULL
    ["rel"]=&gt; array(0) {
    }
    ["rev"]=&gt; array(0) {
    }
    ["order"]=&gt; NULL
    ["resource"]=&gt; NULL
    ["privilege"]=&gt; NULL
    ["active"]=&gt; bool(false)
    ["visible"]=&gt; bool(true)
    ["type"]=&gt; string(23) "Zend_Navigation_Page_Uri"
    ["pages"]=&gt; array(0) {
    }
    ["uri"]=&gt; string(1) "#"
  }
  [1]=&gt; array(15) {
    ["label"]=&gt; string(6) "Page 2"
    ["id"]=&gt; NULL
    ["class"]=&gt; NULL
    ["title"]=&gt; NULL
    ["target"]=&gt; NULL
    ["rel"]=&gt; array(0) {
    }
    ["rev"]=&gt; array(0) {
    }
    ["order"]=&gt; NULL
    ["resource"]=&gt; NULL
    ["privilege"]=&gt; NULL
    ["active"]=&gt; bool(false)
    ["visible"]=&gt; bool(true)
    ["type"]=&gt; string(23) "Zend_Navigation_Page_Uri"
    ["pages"]=&gt; array(2) {
      [0]=&gt; array(15) {
        ["label"]=&gt; string(8) "Page 2.1"
        ["id"]=&gt; NULL
        ["class"]=&gt; NULL
        ["title"]=&gt; NULL
        ["target"]=&gt; NULL
        ["rel"]=&gt; array(0) {
        }
        ["rev"]=&gt; array(0) {
        }
        ["order"]=&gt; NULL
        ["resource"]=&gt; NULL
        ["privilege"]=&gt; NULL
        ["active"]=&gt; bool(false)
        ["visible"]=&gt; bool(true)
        ["type"]=&gt; string(23) "Zend_Navigation_Page_Uri"
        ["pages"]=&gt; array(0) {
        }
        ["uri"]=&gt; string(1) "#"
      }
      [1]=&gt;
      array(15) {
        ["label"]=&gt; string(8) "Page 2.2"
        ["id"]=&gt; NULL
        ["class"]=&gt; NULL
        ["title"]=&gt; NULL
        ["target"]=&gt; NULL
        ["rel"]=&gt; array(0) {
        }
        ["rev"]=&gt; array(0) {
        }
        ["order"]=&gt; NULL
        ["resource"]=&gt; NULL
        ["privilege"]=&gt; NULL
        ["active"]=&gt; bool(false)
        ["visible"]=&gt; bool(true)
        ["type"]=&gt; string(23) "Zend_Navigation_Page_Uri"
        ["pages"]=&gt; array(0) {
        }
        ["uri"]=&gt; string(1) "#"
      }
    }
    ["uri"]=&gt; string(1) "#"
  }
}
*/
</programlisting>
        </example>
    </section>
</section>

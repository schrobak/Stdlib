<?xml version="1.0" encoding="utf-8"?>


<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="learning.layout.intro"><info><title>Introduction</title></info>
    

    <para>
        When building a website using Zend Framework <acronym>MVC</acronym> layers, your view
        scripts will typically be just snippets of <acronym>HTML</acronym> pertinent to the
        requested action. For instance, if you had the action "<filename>/user/list</filename>",
        you might create a view script that iterates through the users and presents an unordered
        list:
    </para>

    <programlisting language="php">
&lt;h2&gt;Users&lt;/h2&gt;
&lt;ul&gt;
    &lt;?php if (!count($this-&gt;users)): ?&gt;
    &lt;li&gt;No users found&lt;/li&gt;
    &lt;?php else: ?&gt;
    &lt;?php foreach ($this-&gt;users as $user): ?&gt;
    &lt;li&gt;
        &lt;?php echo $this-&gt;escape($user-&gt;fullname) ?&gt;
        (&lt;?php echo $this-&gt;escape($user-&gt;email) ?&gt;)
    &lt;/li&gt;
    &lt;?php endforeach ?&gt;
    &lt;?php endif ?&gt;
&lt;/ul&gt;
</programlisting>

    <para>
        Since this is just a snippet of <acronym>HTML</acronym>, it's not a valid page; it's missing
        a <acronym>DOCTYPE</acronym> declaration, and the opening <acronym>HTML</acronym> and
        <acronym>BODY</acronym> tags. So, the question is, where will these be created?
    </para>

    <para>
        In early versions of Zend Framework, developers often created "header" and "footer" view
        scripts that had these artifacts, and then in each view script they would render them. While
        this methodology worked, it also made it difficult to refactor later, or to build composite
        content by calling multiple actions.
    </para>

    <para>
        The <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://martinfowler.com/eaaCatalog/twoStepView.html">Two Step View</link>
        design pattern answers many of the issues presented. In this pattern, the "application" view
        is created first, and then injected into the "page" view, which is then presented to the
        client. The page view can be thought of as your site-wide template or layout, and would have
        common elements used across various pages.
    </para>

    <para>
        Within Zend Framework, <classname>Zend_Layout</classname> implements the Two Step View
        pattern.
    </para>
</section>
